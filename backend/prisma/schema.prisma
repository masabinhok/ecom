generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  addresses Address[]
  orders    Order[]
  cart      Cart?
  reviews   Review[]
  wishlists Wishlist[]
  @@index([email])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  stock       Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  sku         String?  @unique
  imageUrl    String?
  variants    ProductVariant[]
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
  @@index([name, categoryId])
}

model Order {
  id              Int         @id @default(autoincrement())
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  items           OrderItem[]
  total           Decimal     @db.Decimal(10, 2)
  status          OrderStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  notes           String?
  payment         Payment?
  shippingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       Int
  coupon          Coupon?     @relation(fields: [couponId], references: [id])
  couponId        Int?
  @@index([userId, createdAt])
}

model OrderItem {
  id        Int             @id @default(autoincrement())
  order     Order           @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product         @relation(fields: [productId], references: [id])
  productId Int
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId Int?
  quantity  Int
  price     Decimal         @db.Decimal(10, 2)
  @@unique([orderId, productId, variantId])
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int        @unique
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id              Int             @id @default(autoincrement())
  cart            Cart            @relation(fields: [cartId], references: [id])
  cartId          Int
  product         Product         @relation(fields: [productId], references: [id])
  productId       Int
  quantity        Int             @default(1)
  variant         ProductVariant? @relation(fields: [variantId], references: [id])
  variantId       Int?
  priceAtAddition Decimal         @db.Decimal(10, 2)
  @@unique([cartId, productId, variantId])
}

model Payment {
  id            Int           @id @default(autoincrement())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       Int           @unique
  amount        Decimal       @db.Decimal(10, 2)
  processor     String
  transactionId String?
  status        PaymentStatus @default(PENDING)
  metadata      Json?
  paidAt        DateTime?
  method        String
  currency      String        @default("NPR")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  products    Product[]
  imageUrl    String?
  description String?
}

model ProductVariant {
  id            Int            @id @default(autoincrement())
  product       Product        @relation(fields: [productId], references: [id])
  productId     Int
  name          String
  sku           String         @unique
  price         Decimal        @db.Decimal(10, 2)
  stock         Int
  orderItem     OrderItem[]
  cartItem      CartItem[]
  wishlistItems WishlistItem[]
}

model Address {
  id         Int     @id @default(autoincrement())
  user       User?   @relation(fields: [userId], references: [id])
  userId     Int?
  street     String
  city       String
  state      String
  country    String
  postalCode String
  phone      String?
  label      String?
  orders     Order[]
}

model Review {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  isApproved Boolean  @default(false)
  @@unique([productId, userId])
}

model Wishlist {
  id     Int            @id @default(autoincrement())
  user   User           @relation(fields: [userId], references: [id])
  userId Int
  items  WishlistItem[]
}

model WishlistItem {
  id         Int       @id @default(autoincrement())
  wishlist   Wishlist  @relation(fields: [wishlistId], references: [id])
  wishlistId Int
  product    Product         @relation(fields: [productId], references: [id])
  productId  Int
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  variantId  Int?
  @@unique([productId, variantId, wishlistId])
}

model Coupon {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  discount  Decimal  @db.Decimal(5, 2)
  expiresAt DateTime
  isActive  Boolean  @default(true)
  orders    Order[]
}
